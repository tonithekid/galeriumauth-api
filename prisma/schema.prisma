generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String
  name            String
  isAdmin         Boolean  @default(false)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  subscriptions Subscription[]
  downloads     Download[]
  favorites     Favorite[]

  @@map("users")
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  planId               String    // monthly, annual, premium
  planName             String
  status               String    // active, canceled, past_due, unpaid, trialing
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean   @default(false)
  canceledAt           DateTime?
  amount               Decimal   @db.Decimal(10, 2)
  mpPaymentId          String?
  mpSubscriptionId     String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relação com User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Asset {
  id           String   @id @default(cuid())
  title        String   @db.VarChar(255)
  description  String?  @db.Text
  category     String   @db.VarChar(100)
  tags         String[] // Array PostgreSQL nativo
  thumbnailUrl String   @db.VarChar(500)
  downloadUrl  String   @db.VarChar(500)
  fileName     String?  @db.VarChar(255)
  fileSize     BigInt?  // Para arquivos grandes
  downloads    Int      @default(0)
  isPremium    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relações
  userDownloads Download[]
  favorites     Favorite[]

  @@index([category])
  @@index([isPremium])
  @@index([createdAt])
  @@map("assets")
}

model Download {
  id        String   @id @default(cuid())
  userId    String
  assetId   String
  createdAt DateTime @default(now())

  // Relações
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([userId, assetId])
  @@index([userId])
  @@index([assetId])
  @@map("downloads")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  assetId   String
  createdAt DateTime @default(now())

  // Relações
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([userId, assetId])
  @@index([userId])
  @@index([assetId])
  @@map("favorites")
}
